/* tslint:disable */
/* eslint-disable */
/**
 * dutch_account_app
 * 割り勘アプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDebtRecordsRequestInner } from '../model';
// @ts-ignore
import { BorrowingUserDebtRecord } from '../model';
// @ts-ignore
import { ResponseError } from '../model';
// @ts-ignore
import { UserDebtRecord } from '../model';
/**
 * DebtRecordApi - axios parameter creator
 * @export
 */
export const DebtRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 借金履歴を複数作成する
         * @summary 借金履歴を複数作成
         * @param {Array<AddDebtRecordsRequestInner>} [addDebtRecordsRequestInner] リクエスト用の借金履歴の配列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDebtRecords: async (addDebtRecordsRequestInner?: Array<AddDebtRecordsRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/debt_records/bulk_insert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject(localVarHeaderParameter, "access-token", configuration)

            // authentication client required
            await setApiKeyToObject(localVarHeaderParameter, "client", configuration)

            // authentication uid required
            await setApiKeyToObject(localVarHeaderParameter, "uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDebtRecordsRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 借金履歴を削除する
         * @summary 借金履歴を削除
         * @param {number} debtRecordId 借金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDebtRecordByDebtRecordId: async (debtRecordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'debtRecordId' is not null or undefined
            assertParamExists('deleteDebtRecordByDebtRecordId', 'debtRecordId', debtRecordId)
            const localVarPath = `/debt_records/{debt_record_id}`
                .replace(`{${"debt_record_id"}}`, encodeURIComponent(String(debtRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject(localVarHeaderParameter, "access-token", configuration)

            // authentication client required
            await setApiKeyToObject(localVarHeaderParameter, "client", configuration)

            // authentication uid required
            await setApiKeyToObject(localVarHeaderParameter, "uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 貸主に紐づく全ての借金履歴及び借主名を取得する
         * @summary 貸主に紐づく全ての借金履歴及び借主名を取得
         * @param {number} lendingUserId 貸主ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBorrowingUserDebtRecordsByLendingUserId: async (lendingUserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lendingUserId' is not null or undefined
            assertParamExists('getBorrowingUserDebtRecordsByLendingUserId', 'lendingUserId', lendingUserId)
            const localVarPath = `/users/{lending_user_id}/borrowing_user_debt_records`
                .replace(`{${"lending_user_id"}}`, encodeURIComponent(String(lendingUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject(localVarHeaderParameter, "access-token", configuration)

            // authentication client required
            await setApiKeyToObject(localVarHeaderParameter, "client", configuration)

            // authentication uid required
            await setApiKeyToObject(localVarHeaderParameter, "uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 借金履歴及びユーザー名を取得する
         * @summary 借金履歴及びユーザー名を取得
         * @param {number} debtRecordId 借金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDebtRecordByDebtRecordId: async (debtRecordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'debtRecordId' is not null or undefined
            assertParamExists('getUserDebtRecordByDebtRecordId', 'debtRecordId', debtRecordId)
            const localVarPath = `/user_debt_records/{debt_record_id}`
                .replace(`{${"debt_record_id"}}`, encodeURIComponent(String(debtRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject(localVarHeaderParameter, "access-token", configuration)

            // authentication client required
            await setApiKeyToObject(localVarHeaderParameter, "client", configuration)

            // authentication uid required
            await setApiKeyToObject(localVarHeaderParameter, "uid", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DebtRecordApi - functional programming interface
 * @export
 */
export const DebtRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DebtRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * 借金履歴を複数作成する
         * @summary 借金履歴を複数作成
         * @param {Array<AddDebtRecordsRequestInner>} [addDebtRecordsRequestInner] リクエスト用の借金履歴の配列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDebtRecords(addDebtRecordsRequestInner?: Array<AddDebtRecordsRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDebtRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDebtRecords(addDebtRecordsRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 借金履歴を削除する
         * @summary 借金履歴を削除
         * @param {number} debtRecordId 借金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDebtRecordByDebtRecordId(debtRecordId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDebtRecordByDebtRecordId(debtRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 貸主に紐づく全ての借金履歴及び借主名を取得する
         * @summary 貸主に紐づく全ての借金履歴及び借主名を取得
         * @param {number} lendingUserId 貸主ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBorrowingUserDebtRecordsByLendingUserId(lendingUserId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BorrowingUserDebtRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBorrowingUserDebtRecordsByLendingUserId(lendingUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 借金履歴及びユーザー名を取得する
         * @summary 借金履歴及びユーザー名を取得
         * @param {number} debtRecordId 借金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDebtRecordByDebtRecordId(debtRecordId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDebtRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDebtRecordByDebtRecordId(debtRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DebtRecordApi - factory interface
 * @export
 */
export const DebtRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DebtRecordApiFp(configuration)
    return {
        /**
         * 借金履歴を複数作成する
         * @summary 借金履歴を複数作成
         * @param {Array<AddDebtRecordsRequestInner>} [addDebtRecordsRequestInner] リクエスト用の借金履歴の配列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDebtRecords(addDebtRecordsRequestInner?: Array<AddDebtRecordsRequestInner>, options?: any): AxiosPromise<Array<UserDebtRecord>> {
            return localVarFp.addDebtRecords(addDebtRecordsRequestInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 借金履歴を削除する
         * @summary 借金履歴を削除
         * @param {number} debtRecordId 借金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDebtRecordByDebtRecordId(debtRecordId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDebtRecordByDebtRecordId(debtRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 貸主に紐づく全ての借金履歴及び借主名を取得する
         * @summary 貸主に紐づく全ての借金履歴及び借主名を取得
         * @param {number} lendingUserId 貸主ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBorrowingUserDebtRecordsByLendingUserId(lendingUserId: number, options?: any): AxiosPromise<Array<BorrowingUserDebtRecord>> {
            return localVarFp.getBorrowingUserDebtRecordsByLendingUserId(lendingUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 借金履歴及びユーザー名を取得する
         * @summary 借金履歴及びユーザー名を取得
         * @param {number} debtRecordId 借金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDebtRecordByDebtRecordId(debtRecordId: number, options?: any): AxiosPromise<UserDebtRecord> {
            return localVarFp.getUserDebtRecordByDebtRecordId(debtRecordId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DebtRecordApi - object-oriented interface
 * @export
 * @class DebtRecordApi
 * @extends {BaseAPI}
 */
export class DebtRecordApi extends BaseAPI {
    /**
     * 借金履歴を複数作成する
     * @summary 借金履歴を複数作成
     * @param {Array<AddDebtRecordsRequestInner>} [addDebtRecordsRequestInner] リクエスト用の借金履歴の配列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtRecordApi
     */
    public addDebtRecords(addDebtRecordsRequestInner?: Array<AddDebtRecordsRequestInner>, options?: AxiosRequestConfig) {
        return DebtRecordApiFp(this.configuration).addDebtRecords(addDebtRecordsRequestInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 借金履歴を削除する
     * @summary 借金履歴を削除
     * @param {number} debtRecordId 借金履歴ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtRecordApi
     */
    public deleteDebtRecordByDebtRecordId(debtRecordId: number, options?: AxiosRequestConfig) {
        return DebtRecordApiFp(this.configuration).deleteDebtRecordByDebtRecordId(debtRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 貸主に紐づく全ての借金履歴及び借主名を取得する
     * @summary 貸主に紐づく全ての借金履歴及び借主名を取得
     * @param {number} lendingUserId 貸主ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtRecordApi
     */
    public getBorrowingUserDebtRecordsByLendingUserId(lendingUserId: number, options?: AxiosRequestConfig) {
        return DebtRecordApiFp(this.configuration).getBorrowingUserDebtRecordsByLendingUserId(lendingUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 借金履歴及びユーザー名を取得する
     * @summary 借金履歴及びユーザー名を取得
     * @param {number} debtRecordId 借金履歴ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtRecordApi
     */
    public getUserDebtRecordByDebtRecordId(debtRecordId: number, options?: AxiosRequestConfig) {
        return DebtRecordApiFp(this.configuration).getUserDebtRecordByDebtRecordId(debtRecordId, options).then((request) => request(this.axios, this.basePath));
    }
}
