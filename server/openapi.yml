openapi: 3.0.0
info:
  version: 1.0.0
  title: dutch-account-app
  description: 割り勘計算アプリ
servers:
  - url: http://localhost:3000/api
    description: 開発環境
tags:
  - name: user
  - name: paymentGroup
paths:
  /users:
    get:
      tags:
        - user
      summary: 全ユーザ情報取得API
      description: 全てのユーザ情報を取得する
      operationId: getUsers
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - user
      summary: ユーザ作成API
      description: ユーザを作成する
      operationId: addUser
      requestBody:
        $ref: "#/components/requestBodies/UserBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{user_id}:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      tags:
        - user
      summary: ユーザ情報取得API
      description: ユーザIDでユーザ情報を取得する
      operationId: getUserByUserId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - user
      summary: ユーザ更新API
      description: ユーザIDでユーザ情報を更新する
      operationId: updateUserByUserId
      requestBody:
        $ref: "#/components/requestBodies/UserBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - user
      summary: ユーザ削除API
      description: ユーザIDでユーザ情報を削除する
      operationId: deleteUserByUserId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups:
    get:
      tags:
        - paymentGroup
      summary: 全支払グループ情報
      description: 全ての支払グループ情報を取得する
      operationId: getPaymentGroups
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    NoContent:
      description: リクエストが成功し、返すリソースがない時のレスポンス
      content:
        {}
    BadRequest:
      description: リクエストパラメーターに不備がある時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: リクエストパラメーターに不備があります
    Unauthorized:
      description: 認証されていない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: アクセス権限がありません
    NotFound:
      description: リクエストされたリソースが存在しない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: ページが見つかりません
    InternalServerError:
      description: サーバーでエラーが発生している時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 500
            message: サーバーでエラーが発生しています
  schemas:
    Error:
      description: エラー情報
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: HTTPステータスコード
        message:
          type: string
          description: エラーメッセージ
    User:
      description: ユーザ情報
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: ユーザID
        name:
          type: string
          example: 太郎
          description: ユーザ名
    PaymentGroup:
      description: 支払グループ情報
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: 支払グループID
        name:
          type: string
          example: 家族
          description: 支払グループ名
  requestBodies:
    UserBody:
      description: リクエストユーザ情報
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: 太郎
                description: ユーザ名
  parameters:
    UserId:
      name: user_id
      in: path
      description: ユーザID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
