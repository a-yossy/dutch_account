openapi: 3.0.0
info:
  version: 1.0.0
  title: dutch-account-app
  description: 割り勘計算アプリ
servers:
  - url: http://localhost:3000/api
    description: 開発環境
tags:
  - name: user
  - name: paymentGroup
  - name: userPaymentGroup
  - name: purchaseRecord
  - name: admin
security:
  - cookieAuth: []
paths:
  /users:
    get:
      tags:
        - user
      summary: 全ユーザ情報取得API
      description: 全てのユーザ情報を取得する
      operationId: getUsers
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - user
      summary: ユーザ作成API
      description: ユーザを作成する
      operationId: addUser
      requestBody:
        $ref: "#/components/requestBodies/UserBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{user_id}:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      tags:
        - user
      summary: ユーザ情報取得API
      description: ユーザIDでユーザ情報を取得する
      operationId: getUserByUserId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - user
      summary: ユーザ更新API
      description: ユーザIDでユーザ情報を更新する
      operationId: updateUserByUserId
      requestBody:
        $ref: "#/components/requestBodies/UserBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - user
      summary: ユーザ削除API
      description: ユーザIDでユーザ情報を削除する
      operationId: deleteUserByUserId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups:
    get:
      tags:
        - paymentGroup
      summary: 全支払グループ情報
      description: 全ての支払グループ情報を取得する
      operationId: getPaymentGroups
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - paymentGroup
      summary: 支払グループ作成API
      description: 支払グループを作成する
      operationId: addPaymentGroup
      requestBody:
        $ref: "#/components/requestBodies/PaymentGroupBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - paymentGroup
      summary: 支払グループ情報取得API
      description: 支払グループIDで支払グループ情報を取得する
      operationId: getPaymentGroupByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - paymentGroup
      summary: 支払グループ更新API
      description: 支払グループIDで支払グループ情報を更新する
      operationId: updatePaymentGroupByPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/PaymentGroupBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - paymentGroup
      summary: 支払グループ削除API
      description: 支払グループIDで支払グループ情報を削除する
      operationId: deletePaymentGroupByPaymentGroupId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/user_payment_groups:
    get:
      tags:
        - userPaymentGroup
      summary: 全ユーザ支払グループ情報取得API
      description: 支払グループIDで全てのユーザ支払グループ情報を取得する
      operationId: getUserPaymentGroupsByPaymentGroupId
      parameters:
        - $ref: "#/components/parameters/PaymentGroupId"
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - userPaymentGroup
      summary: ユーザ支払グループ作成API
      description: ユーザ支払グループを作成する
      operationId: addUserPaymentGroup
      parameters:
        - $ref: "#/components/parameters/PaymentGroupId"
      requestBody:
        $ref: "#/components/requestBodies/UserPaymentGroupBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - userPaymentGroup
      summary: ユーザ支払グループ更新API
      description: ユーザ支払グループを更新する
      operationId: updateUserPaymentGroup
      parameters:
        - $ref: "#/components/parameters/PaymentGroupId"
      requestBody:
        $ref: "#/components/requestBodies/UserPaymentGroupBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/purchase_records:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - purchaseRecord
      summary: 支払グループに紐づく全購入履歴情報取得API
      description: 支払グループIDで全ての購入履歴情報を取得する
      operationId: getPurchaseRecordsByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PurchaseRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /user_payment_groups/purchase_records/:
    post:
      tags:
        - purchaseRecord
      summary: 購入履歴複数作成API
      description: 購入履歴を複数作成する
      operationId: addPurchaseRecords
      requestBody:
        $ref: "#/components/requestBodies/PurchaseRecordsBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PurchaseRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /purchase_records/{purchase_record_id}:
    parameters:
      - $ref: "#/components/parameters/PurchaseRecordId"
    get:
      tags:
        - purchaseRecord
      summary: 購入履歴取得API
      description: 購入履歴IDで購入履歴を取得する
      operationId: getPurchaseRecordByPurchaseRecordId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - purchaseRecord
      summary: 購入履歴削除API
      description: 購入履歴IDで購入履歴を削除する
      operationId: deletePurchaseRecordByPurchaseRecordId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /user_payment_groups/{user_payment_group_id}/purchase_records/{purchase_record_id}:
    parameters:
      - $ref: "#/components/parameters/UserPaymentGroupId"
      - $ref: "#/components/parameters/PurchaseRecordId"
    put:
      tags:
        - purchaseRecord
      summary: 購入履歴更新API
      description: 購入履歴IDで購入履歴を更新する
      operationId: updatePurchaseRecordByPurchaseRecordId
      requestBody:
        $ref: "#/components/requestBodies/PurchaseRecordBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /sign_up:
    post:
      tags:
        - admin
      summary: サインアップAPI
      description: サインアップする
      operationId: signUp
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignUpBody"
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /log_in:
    post:
      tags:
        - admin
      summary: ログインAPI
      description: ログインする
      operationId: logIn
      security: []
      requestBody:
        $ref: "#/components/requestBodies/LogInBody"
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"
  /log_out:
    post:
      tags:
        - admin
      summary: ログアウトAPI
      description: ログアウトする
      operationId: logOut
      security: []
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    NoContent:
      description: リクエストが成功し、返すリソースがない時のレスポンス
      content:
        {}
    BadRequest:
      description: リクエストパラメーターに不備がある時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: リクエストパラメーターに不備があります
    Unauthorized:
      description: 認証されていない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: アクセス権限がありません
    NotFound:
      description: リクエストされたリソースが存在しない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: ページが見つかりません
    InternalServerError:
      description: サーバーでエラーが発生している時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 500
            message: サーバーでエラーが発生しています
  schemas:
    Error:
      description: エラー情報
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: HTTPステータスコード
        message:
          type: string
          description: エラーメッセージ
    User:
      description: ユーザ情報
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: ユーザID
          example: 1
        name:
          type: string
          description: ユーザ名
          example: 太郎
    PaymentGroup:
      description: 支払グループ情報
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: 支払グループID
          example: 1
        name:
          type: string
          description: 支払グループ名
          example: 家族
    UserPaymentGroup:
      description: ユーザ支払グループ情報
      type: object
      required:
        - user_id
        - name
        - payment_ratio
      properties:
        user_id:
          type: integer
          format: int64
          description: ユーザID
          example: 1
        name:
          type: string
          description: ユーザ名
          example: 太郎
        payment_ratio:
          type: number
          format: float
          description: 支払割合
          example: 0.4
    PurchaseRecord:
      description: 購入履歴情報
      type: object
      required:
        - id
        - name
        - amount_of_money
        - purchased_on
        - description
      properties:
        id:
          type: integer
          format: int64
          description: 購入履歴ID
          example: 1
        name:
          type: string
          description: ユーザ名
          example: 太郎
        amount_of_money:
          type: integer
          format: int32
          description: 購入金額
          example: 3000
        purchased_on:
          type: string
          format: date
          description: 購入日
          example: "2022-01-01"
        description:
          type: string
          description: 購入説明
          example: 食材
  requestBodies:
    UserBody:
      description: リクエストユーザ情報
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: ユーザ名
                example: 太郎
    PaymentGroupBody:
      description: リクエスト支払グループ情報
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: 支払グループ名
                example: 家族
    UserPaymentGroupBody:
      description: リクエストユーザ支払グループ情報
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - user_id
                - payment_ratio
              properties:
                user_id:
                  type: integer
                  format: int64
                  description: ユーザID
                  example: 1
                payment_ratio:
                  type: number
                  format: float
                  description: 支払割合
                  example: 0.4
    PurchaseRecordBody:
      description: リクエスト購入履歴情報
      content:
        application/json:
          schema:
            type: object
            required:
              - amount_of_money
              - purchased_on
              - description
            properties:
              amount_of_money:
                type: integer
                format: int32
                description: 購入金額
                example: 3000
              purchased_on:
                type: string
                format: date
                description: 購入日
                example: "2022-01-01"
              description:
                type: string
                description: 購入説明
                example: 食材
    PurchaseRecordsBody:
      description: リクエスト複数購入履歴情報
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - user_payment_group_id
                - amount_of_money
                - purchased_on
                - description
              properties:
                user_payment_group_id:
                  type: integer
                  format: int64
                  description: ユーザ支払グループID
                  example: 1
                amount_of_money:
                  type: integer
                  format: int32
                  description: 購入金額
                  example: 3000
                purchased_on:
                  type: string
                  format: date
                  description: 購入日付
                  example: "2022-01-01"
                description:
                  type: string
                  description: 購入説明
                  example: 食材
    SignUpBody:
      description: サインアップ情報
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                description: 管理者名
                example: 太郎
              email:
                type: string
                format: email
                description: メールアドレス
                example: email@example.com
              password:
                type: string
                format: password
                description: パスワード
                example: password
    LogInBody:
      description: ログイン情報
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                description: メールアドレス
                example: email@example.com
              password:
                type: string
                format: password
                description: パスワード
                example: password
  parameters:
    UserId:
      name: user_id
      in: path
      description: ユーザID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    PaymentGroupId:
      name: payment_group_id
      in: path
      description: 支払グループID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    UserPaymentGroupId:
      name: user_payment_group_id
      in: path
      description: ユーザ支払グループID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    PurchaseRecordId:
      name: purchase_record_id
      in: path
      description: 購入履歴ID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: ADMIN
