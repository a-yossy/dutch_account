/* tslint:disable */
/* eslint-disable */
/**
 * dutch_account_app
 * 割り勘アプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddUserPaymentGroupsByPaymentGroupIdRequestInner } from '../model';
// @ts-ignore
import { UserPaymentGroup } from '../model';
/**
 * UserPaymentGroupApi - axios parameter creator
 * @export
 */
export const UserPaymentGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 支払グループIDでユーザー支払グループを複数作成する
         * @summary ユーザー支払グループ複数作成
         * @param {number} paymentGroupId 支払グループID
         * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPaymentGroupsByPaymentGroupId: async (paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentGroupId' is not null or undefined
            assertParamExists('addUserPaymentGroupsByPaymentGroupId', 'paymentGroupId', paymentGroupId)
            const localVarPath = `/payment_groups/{payment_group_id}/user_payment_groups/bulk_insert`
                .replace(`{${"payment_group_id"}}`, encodeURIComponent(String(paymentGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserPaymentGroupsByPaymentGroupIdRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザー支払グループIDでユーザー支払グループを取得する
         * @summary ユーザー支払グループ取得
         * @param {number} userPaymentGroupId ユーザー支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPaymentGroupByUserPaymentGroupId: async (userPaymentGroupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userPaymentGroupId' is not null or undefined
            assertParamExists('getUserPaymentGroupByUserPaymentGroupId', 'userPaymentGroupId', userPaymentGroupId)
            const localVarPath = `/user_payment_groups/{user_payment_group_id}`
                .replace(`{${"user_payment_group_id"}}`, encodeURIComponent(String(userPaymentGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 支払グループIDで全てのユーザー支払グループを取得する
         * @summary 支払グループに紐づく全ユーザー支払グループ取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPaymentGroupsByPaymentGroupId: async (paymentGroupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentGroupId' is not null or undefined
            assertParamExists('getUserPaymentGroupsByPaymentGroupId', 'paymentGroupId', paymentGroupId)
            const localVarPath = `/payment_groups/{payment_group_id}/user_payment_groups`
                .replace(`{${"payment_group_id"}}`, encodeURIComponent(String(paymentGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 支払グループIDでユーザー支払グループを複数更新する
         * @summary ユーザー支払グループ複数更新
         * @param {number} paymentGroupId 支払グループID
         * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPaymentGroupsByPaymentGroupId: async (paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentGroupId' is not null or undefined
            assertParamExists('updateUserPaymentGroupsByPaymentGroupId', 'paymentGroupId', paymentGroupId)
            const localVarPath = `/payment_groups/{payment_group_id}/user_payment_groups/bulk_update`
                .replace(`{${"payment_group_id"}}`, encodeURIComponent(String(paymentGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserPaymentGroupsByPaymentGroupIdRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserPaymentGroupApi - functional programming interface
 * @export
 */
export const UserPaymentGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserPaymentGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 支払グループIDでユーザー支払グループを複数作成する
         * @summary ユーザー支払グループ複数作成
         * @param {number} paymentGroupId 支払グループID
         * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPaymentGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserPaymentGroupsByPaymentGroupId(paymentGroupId, addUserPaymentGroupsByPaymentGroupIdRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザー支払グループIDでユーザー支払グループを取得する
         * @summary ユーザー支払グループ取得
         * @param {number} userPaymentGroupId ユーザー支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPaymentGroupByUserPaymentGroupId(userPaymentGroupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPaymentGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPaymentGroupByUserPaymentGroupId(userPaymentGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 支払グループIDで全てのユーザー支払グループを取得する
         * @summary 支払グループに紐づく全ユーザー支払グループ取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPaymentGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPaymentGroupsByPaymentGroupId(paymentGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 支払グループIDでユーザー支払グループを複数更新する
         * @summary ユーザー支払グループ複数更新
         * @param {number} paymentGroupId 支払グループID
         * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPaymentGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPaymentGroupsByPaymentGroupId(paymentGroupId, addUserPaymentGroupsByPaymentGroupIdRequestInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserPaymentGroupApi - factory interface
 * @export
 */
export const UserPaymentGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserPaymentGroupApiFp(configuration)
    return {
        /**
         * 支払グループIDでユーザー支払グループを複数作成する
         * @summary ユーザー支払グループ複数作成
         * @param {number} paymentGroupId 支払グループID
         * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options?: any): AxiosPromise<Array<UserPaymentGroup>> {
            return localVarFp.addUserPaymentGroupsByPaymentGroupId(paymentGroupId, addUserPaymentGroupsByPaymentGroupIdRequestInner, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザー支払グループIDでユーザー支払グループを取得する
         * @summary ユーザー支払グループ取得
         * @param {number} userPaymentGroupId ユーザー支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPaymentGroupByUserPaymentGroupId(userPaymentGroupId: number, options?: any): AxiosPromise<UserPaymentGroup> {
            return localVarFp.getUserPaymentGroupByUserPaymentGroupId(userPaymentGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 支払グループIDで全てのユーザー支払グループを取得する
         * @summary 支払グループに紐づく全ユーザー支払グループ取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, options?: any): AxiosPromise<Array<UserPaymentGroup>> {
            return localVarFp.getUserPaymentGroupsByPaymentGroupId(paymentGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 支払グループIDでユーザー支払グループを複数更新する
         * @summary ユーザー支払グループ複数更新
         * @param {number} paymentGroupId 支払グループID
         * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options?: any): AxiosPromise<Array<UserPaymentGroup>> {
            return localVarFp.updateUserPaymentGroupsByPaymentGroupId(paymentGroupId, addUserPaymentGroupsByPaymentGroupIdRequestInner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserPaymentGroupApi - interface
 * @export
 * @interface UserPaymentGroupApi
 */
export interface UserPaymentGroupApiInterface {
    /**
     * 支払グループIDでユーザー支払グループを複数作成する
     * @summary ユーザー支払グループ複数作成
     * @param {number} paymentGroupId 支払グループID
     * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPaymentGroupApiInterface
     */
    addUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options?: AxiosRequestConfig): AxiosPromise<Array<UserPaymentGroup>>;

    /**
     * ユーザー支払グループIDでユーザー支払グループを取得する
     * @summary ユーザー支払グループ取得
     * @param {number} userPaymentGroupId ユーザー支払グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPaymentGroupApiInterface
     */
    getUserPaymentGroupByUserPaymentGroupId(userPaymentGroupId: number, options?: AxiosRequestConfig): AxiosPromise<UserPaymentGroup>;

    /**
     * 支払グループIDで全てのユーザー支払グループを取得する
     * @summary 支払グループに紐づく全ユーザー支払グループ取得
     * @param {number} paymentGroupId 支払グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPaymentGroupApiInterface
     */
    getUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, options?: AxiosRequestConfig): AxiosPromise<Array<UserPaymentGroup>>;

    /**
     * 支払グループIDでユーザー支払グループを複数更新する
     * @summary ユーザー支払グループ複数更新
     * @param {number} paymentGroupId 支払グループID
     * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPaymentGroupApiInterface
     */
    updateUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options?: AxiosRequestConfig): AxiosPromise<Array<UserPaymentGroup>>;

}

/**
 * UserPaymentGroupApi - object-oriented interface
 * @export
 * @class UserPaymentGroupApi
 * @extends {BaseAPI}
 */
export class UserPaymentGroupApi extends BaseAPI implements UserPaymentGroupApiInterface {
    /**
     * 支払グループIDでユーザー支払グループを複数作成する
     * @summary ユーザー支払グループ複数作成
     * @param {number} paymentGroupId 支払グループID
     * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPaymentGroupApi
     */
    public addUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options?: AxiosRequestConfig) {
        return UserPaymentGroupApiFp(this.configuration).addUserPaymentGroupsByPaymentGroupId(paymentGroupId, addUserPaymentGroupsByPaymentGroupIdRequestInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザー支払グループIDでユーザー支払グループを取得する
     * @summary ユーザー支払グループ取得
     * @param {number} userPaymentGroupId ユーザー支払グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPaymentGroupApi
     */
    public getUserPaymentGroupByUserPaymentGroupId(userPaymentGroupId: number, options?: AxiosRequestConfig) {
        return UserPaymentGroupApiFp(this.configuration).getUserPaymentGroupByUserPaymentGroupId(userPaymentGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 支払グループIDで全てのユーザー支払グループを取得する
     * @summary 支払グループに紐づく全ユーザー支払グループ取得
     * @param {number} paymentGroupId 支払グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPaymentGroupApi
     */
    public getUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, options?: AxiosRequestConfig) {
        return UserPaymentGroupApiFp(this.configuration).getUserPaymentGroupsByPaymentGroupId(paymentGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 支払グループIDでユーザー支払グループを複数更新する
     * @summary ユーザー支払グループ複数更新
     * @param {number} paymentGroupId 支払グループID
     * @param {Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>} [addUserPaymentGroupsByPaymentGroupIdRequestInner] リクエスト複数ユーザー支払グループ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPaymentGroupApi
     */
    public updateUserPaymentGroupsByPaymentGroupId(paymentGroupId: number, addUserPaymentGroupsByPaymentGroupIdRequestInner?: Array<AddUserPaymentGroupsByPaymentGroupIdRequestInner>, options?: AxiosRequestConfig) {
        return UserPaymentGroupApiFp(this.configuration).updateUserPaymentGroupsByPaymentGroupId(paymentGroupId, addUserPaymentGroupsByPaymentGroupIdRequestInner, options).then((request) => request(this.axios, this.basePath));
    }
}
