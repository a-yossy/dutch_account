/* tslint:disable */
/* eslint-disable */
/**
 * dutch_account_app
 * 割り勘アプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest } from '../model';
// @ts-ignore
import { Expense } from '../model';
// @ts-ignore
import { ResponseError } from '../model';
/**
 * ExpenseWithDebtRecordsApi - axios parameter creator
 * @export
 */
export const ExpenseWithDebtRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 管理グループに紐づく費用と複数の借金履歴を作成する
         * @summary 管理グループに紐づく費用と複数の借金履歴を作成
         * @param {string} managementGroupId 管理グループID
         * @param {string} paymentGroupId 支払グループID
         * @param {BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest} [bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest] リクエスト用の費用の配列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkInsertExpenseWithDebtRecordsByPaymentGroupId: async (managementGroupId: string, paymentGroupId: string, bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest?: BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'managementGroupId' is not null or undefined
            assertParamExists('bulkInsertExpenseWithDebtRecordsByPaymentGroupId', 'managementGroupId', managementGroupId)
            // verify required parameter 'paymentGroupId' is not null or undefined
            assertParamExists('bulkInsertExpenseWithDebtRecordsByPaymentGroupId', 'paymentGroupId', paymentGroupId)
            const localVarPath = `/management_groups/{management_group_id}/payment_groups/{payment_group_id}/expense_with_debt_records/bulk_insert`
                .replace(`{${"management_group_id"}}`, encodeURIComponent(String(managementGroupId)))
                .replace(`{${"payment_group_id"}}`, encodeURIComponent(String(paymentGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required
            await setApiKeyToObject(localVarHeaderParameter, "access-token", configuration)

            // authentication client required
            await setApiKeyToObject(localVarHeaderParameter, "client", configuration)

            // authentication uid required
            await setApiKeyToObject(localVarHeaderParameter, "uid", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpenseWithDebtRecordsApi - functional programming interface
 * @export
 */
export const ExpenseWithDebtRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpenseWithDebtRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * 管理グループに紐づく費用と複数の借金履歴を作成する
         * @summary 管理グループに紐づく費用と複数の借金履歴を作成
         * @param {string} managementGroupId 管理グループID
         * @param {string} paymentGroupId 支払グループID
         * @param {BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest} [bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest] リクエスト用の費用の配列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkInsertExpenseWithDebtRecordsByPaymentGroupId(managementGroupId: string, paymentGroupId: string, bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest?: BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Expense>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkInsertExpenseWithDebtRecordsByPaymentGroupId(managementGroupId, paymentGroupId, bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExpenseWithDebtRecordsApi - factory interface
 * @export
 */
export const ExpenseWithDebtRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpenseWithDebtRecordsApiFp(configuration)
    return {
        /**
         * 管理グループに紐づく費用と複数の借金履歴を作成する
         * @summary 管理グループに紐づく費用と複数の借金履歴を作成
         * @param {string} managementGroupId 管理グループID
         * @param {string} paymentGroupId 支払グループID
         * @param {BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest} [bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest] リクエスト用の費用の配列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkInsertExpenseWithDebtRecordsByPaymentGroupId(managementGroupId: string, paymentGroupId: string, bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest?: BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest, options?: any): AxiosPromise<Array<Expense>> {
            return localVarFp.bulkInsertExpenseWithDebtRecordsByPaymentGroupId(managementGroupId, paymentGroupId, bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExpenseWithDebtRecordsApi - object-oriented interface
 * @export
 * @class ExpenseWithDebtRecordsApi
 * @extends {BaseAPI}
 */
export class ExpenseWithDebtRecordsApi extends BaseAPI {
    /**
     * 管理グループに紐づく費用と複数の借金履歴を作成する
     * @summary 管理グループに紐づく費用と複数の借金履歴を作成
     * @param {string} managementGroupId 管理グループID
     * @param {string} paymentGroupId 支払グループID
     * @param {BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest} [bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest] リクエスト用の費用の配列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseWithDebtRecordsApi
     */
    public bulkInsertExpenseWithDebtRecordsByPaymentGroupId(managementGroupId: string, paymentGroupId: string, bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest?: BulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest, options?: AxiosRequestConfig) {
        return ExpenseWithDebtRecordsApiFp(this.configuration).bulkInsertExpenseWithDebtRecordsByPaymentGroupId(managementGroupId, paymentGroupId, bulkInsertExpenseWithDebtRecordsByPaymentGroupIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
