/* tslint:disable */
/* eslint-disable */
/**
 * dutch-account-app
 * 割り勘計算アプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddUserRequest
 */
export interface AddUserRequest {
    /**
     * ユーザ名
     * @type {string}
     * @memberof AddUserRequest
     */
    'name': string;
}
/**
 * エラー情報
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * HTTPステータスコード
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * ユーザ情報
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザID
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * ユーザ名
     * @type {string}
     * @memberof User
     */
    'name': string;
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザを作成する
         * @summary ユーザ作成API
         * @param {AddUserRequest} [addUserRequest] リクエストユーザ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (addUserRequest?: AddUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザIDでユーザ情報を取得する
         * @summary ユーザ情報取得API
         * @param {number} userId ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserId: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserByUserId', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全てのユーザ情報を取得する
         * @summary 全ユーザ情報取得API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザIDでユーザ情報を更新する
         * @summary ユーザ更新API
         * @param {number} userId ユーザID
         * @param {AddUserRequest} [addUserRequest] リクエストユーザ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByUserId: async (userId: number, addUserRequest?: AddUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserByUserId', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザを作成する
         * @summary ユーザ作成API
         * @param {AddUserRequest} [addUserRequest] リクエストユーザ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(addUserRequest?: AddUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(addUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザIDでユーザ情報を取得する
         * @summary ユーザ情報取得API
         * @param {number} userId ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUserId(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByUserId(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 全てのユーザ情報を取得する
         * @summary 全ユーザ情報取得API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザIDでユーザ情報を更新する
         * @summary ユーザ更新API
         * @param {number} userId ユーザID
         * @param {AddUserRequest} [addUserRequest] リクエストユーザ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserByUserId(userId: number, addUserRequest?: AddUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserByUserId(userId, addUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * ユーザを作成する
         * @summary ユーザ作成API
         * @param {AddUserRequest} [addUserRequest] リクエストユーザ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(addUserRequest?: AddUserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.addUser(addUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザIDでユーザ情報を取得する
         * @summary ユーザ情報取得API
         * @param {number} userId ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUserId(userId: number, options?: any): AxiosPromise<User> {
            return localVarFp.getUserByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 全てのユーザ情報を取得する
         * @summary 全ユーザ情報取得API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザIDでユーザ情報を更新する
         * @summary ユーザ更新API
         * @param {number} userId ユーザID
         * @param {AddUserRequest} [addUserRequest] リクエストユーザ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserByUserId(userId: number, addUserRequest?: AddUserRequest, options?: any): AxiosPromise<User> {
            return localVarFp.updateUserByUserId(userId, addUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * ユーザを作成する
     * @summary ユーザ作成API
     * @param {AddUserRequest} [addUserRequest] リクエストユーザ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public addUser(addUserRequest?: AddUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).addUser(addUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザIDでユーザ情報を取得する
     * @summary ユーザ情報取得API
     * @param {number} userId ユーザID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByUserId(userId: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全てのユーザ情報を取得する
     * @summary 全ユーザ情報取得API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザIDでユーザ情報を更新する
     * @summary ユーザ更新API
     * @param {number} userId ユーザID
     * @param {AddUserRequest} [addUserRequest] リクエストユーザ情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserByUserId(userId: number, addUserRequest?: AddUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserByUserId(userId, addUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


