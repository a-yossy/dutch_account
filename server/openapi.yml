openapi: 3.0.0
info:
  version: 1.0.0
  title: dutch_account_app
  description: 割り勘アプリ
servers:
  - url: http://localhost:8000/api/v1
    description: 開発環境
tags:
  - name: paymentGroup
  - name: userPaymentGroup
  - name: purchaseRecord
  - name: remittanceRecord
  - name: user
security:
  - accessToken: []
    uid: []
    client: []
paths:
  /payment_groups:
    get:
      tags:
        - paymentGroup
      summary: 全支払グループ取得
      description: 全ての支払グループを取得する
      operationId: getPaymentGroups
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - paymentGroup
      summary: 支払グループ作成
      description: 支払グループを作成する
      operationId: addPaymentGroup
      requestBody:
        $ref: "#/components/requestBodies/PaymentGroupBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - paymentGroup
      summary: 支払グループ取得
      description: 支払グループIDで支払グループを取得する
      operationId: getPaymentGroupByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - paymentGroup
      summary: 支払グループ更新
      description: 支払グループIDで支払グループを更新する
      operationId: updatePaymentGroupByPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/PaymentGroupBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - paymentGroup
      summary: 支払グループ削除
      description: 支払グループIDで支払グループを削除する
      operationId: deletePaymentGroupByPaymentGroupId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/user_payment_groups:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - userPaymentGroup
      summary: 支払グループに紐づく全ユーザー支払グループ取得
      description: 支払グループIDで全てのユーザー支払グループを取得する
      operationId: getUserPaymentGroupsByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /user_payment_groups/{user_payment_group_id}:
    parameters:
      - $ref: "#/components/parameters/UserPaymentGroupId"
    get:
      tags:
        - userPaymentGroup
      summary: ユーザー支払グループ取得
      description: ユーザー支払グループIDでユーザー支払グループを取得する
      operationId: getUserPaymentGroupByUserPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/user_payment_groups/bulk_insert:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    post:
      tags:
        - userPaymentGroup
      summary: ユーザー支払グループ複数作成
      description: 支払グループIDでユーザー支払グループを複数作成する
      operationId: addUserPaymentGroupsByPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/UserPaymentGroupsBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/user_payment_groups/bulk_update:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    put:
      tags:
        - userPaymentGroup
      summary: ユーザー支払グループ複数更新
      description: 支払グループIDでユーザー支払グループを複数更新する
      operationId: updateUserPaymentGroupsByPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/UserPaymentGroupsBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/purchase_records:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - purchaseRecord
      summary: 支払グループに紐づく全購入履歴取得
      description: 支払グループIDで全ての購入履歴を取得する
      operationId: getPurchaseRecordsByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PurchaseRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{user_id}/purchase_records:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      tags:
        - purchaseRecord
      summary: ユーザーに紐づく全購入履歴取得
      description: ユーザーIDで全ての購入履歴を取得する
      operationId: getPurchaseRecordsByUserId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PurchaseRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /user_payment_groups/{user_payment_group_id}/purchase_records:
    parameters:
      - $ref: "#/components/parameters/UserPaymentGroupId"
    get:
      tags:
        - purchaseRecord
      summary: ユーザー支払グループに紐づく全購入履歴取得
      description: ユーザー支払グループIDで全ての購入履歴を取得する
      operationId: getPurchaseRecordsByUserPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PurchaseRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /user_payment_groups/purchase_records/bulk_insert:
    post:
      tags:
        - purchaseRecord
      summary: 購入履歴複数作成
      description: 購入履歴を複数作成する
      operationId: addPurchaseRecords
      requestBody:
        $ref: "#/components/requestBodies/PurchaseRecordsBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PurchaseRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /purchase_records/{purchase_record_id}:
    parameters:
      - $ref: "#/components/parameters/PurchaseRecordId"
    get:
      tags:
        - purchaseRecord
      summary: 購入履歴取得
      description: 購入履歴IDで購入履歴を取得する
      operationId: getPurchaseRecordByPurchaseRecordId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - purchaseRecord
      summary: 購入履歴更新
      description: 購入履歴IDで購入履歴を更新する
      operationId: updatePurchaseRecordByPurchaseRecordId
      requestBody:
        $ref: "#/components/requestBodies/PurchaseRecordBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - purchaseRecord
      summary: 購入履歴削除
      description: 購入履歴IDで購入履歴を削除する
      operationId: deletePurchaseRecordByPurchaseRecordId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/remittance_records:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - remittanceRecord
      summary: 支払グループに紐づく全送金着金履歴取得
      description: 支払グループIDで全ての送金着金履歴を取得する
      operationId: getRemittanceRecordsByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RemittanceRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{from_user_id}/remittance_records:
    parameters:
      - $ref: "#/components/parameters/FromUserId"
    get:
      tags:
        - remittanceRecord
      summary: 送金ユーザーに紐づく全着金履歴取得
      description: 送金ユーザーIDで全ての着金履歴を取得する
      operationId: getToRemittanceRecordsByFromUserId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToRemittanceRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{to_user_id}/remittance_records:
    parameters:
      - $ref: "#/components/parameters/ToUserId"
    get:
      tags:
        - remittanceRecord
      summary: 着金ユーザーに紐づく全送金履歴取得
      description: 着金ユーザーIDで全ての送金履歴を取得する
      operationId: getFromRemittanceRecordsByToUserId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FromRemittanceRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /user_payment_groups/remittance_records:
    post:
      tags:
        - remittanceRecord
      summary: 送金履歴作成
      description: 送金履歴を作成する
      operationId: addRemittanceRecord
      requestBody:
        $ref: "#/components/requestBodies/RemittanceRecordBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemittanceRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /remittance_records/{remittance_record_id}:
    parameters:
      - $ref: "#/components/parameters/RemittanceRecordId"
    get:
      tags:
        - remittanceRecord
      summary: 送金履歴取得
      description: 送金履歴IDで送金履歴を取得する
      operationId: getRemittanceRecordByRemittanceRecordId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemittanceRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - remittanceRecord
      summary: 送金履歴更新
      description: 送金履歴IDで送金履歴を更新する
      operationId: updateRemittanceRecordByRemittanceRecordId
      requestBody:
        $ref: "#/components/requestBodies/RemittanceRecordBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemittanceRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - remittanceRecord
      summary: 送金履歴削除
      description: 送金履歴IDで送金履歴を削除する
      operationId: deleteRemittanceRecordByRemittanceRecordId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /sign_up:
    post:
      tags:
        - user
      summary: サインアップ
      description: サインアップする
      operationId: signUp
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignUpBody"
      responses:
        200:
          description: サインアップに成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            access-token:
              $ref: "#/components/headers/access-token"
            uid:
              $ref: "#/components/headers/uid"
            client:
              $ref: "#/components/headers/client"
            expiry:
              $ref: "#/components/headers/expiry"
        422:
          $ref: "#/components/responses/UnprocessableEntity"
        500:
          $ref: "#/components/responses/InternalServerError"
  /sign_in:
    post:
      tags:
        - user
      summary: サインイン
      description: サインインする
      operationId: signIn
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignInBody"
      responses:
        200:
          description: サインインに成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            access-token:
              $ref: "#/components/headers/access-token"
            uid:
              $ref: "#/components/headers/uid"
            client:
              $ref: "#/components/headers/client"
            expiry:
              $ref: "#/components/headers/expiry"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /sign_out:
    post:
      tags:
        - user
      summary: サインアウト
      description: サインアウトする
      operationId: signOut
      responses:
        200:
          description: サインアウトに成功した時のレスポンス
          content:
            {}
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    NoContent:
      description: リクエストが成功し、返すリソースがない時のレスポンス
      content:
        {}
    BadRequest:
      description: リクエストパラメーターに不備がある時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: リクエストパラメーターに不備があります
    Unauthorized:
      description: 認証されていない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: アクセス権限がありません
    NotFound:
      description: リクエストされたリソースが存在しない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: ページが見つかりません
    UnprocessableEntity:
      description: リクエストされた指示を処理できなかった時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: このアカウントはすでに存在しています
    InternalServerError:
      description: サーバーでエラーが発生している時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: サーバーでエラーが発生しています
  headers:
    access-token:
      description: パスワードとして機能する
      schema:
        type: string
    uid:
      description: ユーザーを識別するために使用する
      schema:
        type: string
    client:
      description: 異なるクライアントで認証を行うために使用する
      schema:
        type: string
    expiry:
      description: セッションが期限切れとなる日付
      schema:
        type: string
  schemas:
    Error:
      description: エラー
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: エラーメッセージ
    User:
      description: ユーザー
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: ユーザーID
          example: 1
        name:
          type: string
          description: ユーザー名
          example: 太郎
    PaymentGroup:
      description: 支払グループ
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: 支払グループID
          example: 1
        name:
          type: string
          description: 支払グループ名
          example: 家族
    UserPaymentGroup:
      description: ユーザー支払グループ
      type: object
      required:
        - id
        - name
        - payment_ratio
      properties:
        id:
          type: integer
          format: int64
          description: ユーザー支払グループID
          example: 1
        name:
          type: string
          description: ユーザー名
          example: 太郎
        payment_ratio:
          type: number
          format: float
          description: 支払割合
          example: 0.4
    PurchaseRecord:
      description: 購入履歴
      type: object
      required:
        - id
        - name
        - amount_of_money
        - purchased_on
        - description
      properties:
        id:
          type: integer
          format: int64
          description: 購入履歴ID
          example: 1
        name:
          type: string
          description: ユーザー名
          example: 太郎
        amount_of_money:
          type: integer
          format: int32
          description: 購入金額
          example: 3000
        purchased_on:
          type: string
          format: date
          description: 購入日
          example: "2022-01-01"
        description:
          type: string
          description: 購入説明
          example: 食材
    PurchaseRecordRequestBody:
      description: 購入履歴のリクエスト
      type: object
      required:
        - user_payment_group_id
        - amount_of_money
        - purchased_on
        - description
      properties:
        user_payment_group_id:
            type: integer
            format: int64
            description: ユーザー支払グループID
            example: 1
        amount_of_money:
          type: integer
          format: int32
          description: 購入金額
          example: 3000
        purchased_on:
          type: string
          format: date
          description: 購入日
          example: "2022-01-01"
        description:
          type: string
          description: 購入説明
          example: 食材
    RemittanceRecord:
      description: 送金着金履歴
      type: object
      required:
        - id
        - from_user_name
        - to_user_name
        - amount_of_money
        - transferred_on
      properties:
        id:
          type: integer
          format: int64
          description: 送金履歴ID
          example: 1
        from_user_name:
          type: string
          description: 送金ユーザー名
          example: 太郎
        to_user_name:
          type: string
          description: 着金ユーザー名
          example: 次郎
        amount_of_money:
          type: integer
          format: int32
          description: 送金金額
          example: 3000
        transferred_on:
          type: string
          format: date
          description: 送金日
          example: "2022-01-01"
    FromRemittanceRecord:
      description: 送金履歴
      type: object
      required:
        - id
        - from_user_name
        - amount_of_money
        - transferred_on
      properties:
        id:
          type: integer
          format: int64
          description: 送金履歴ID
          example: 1
        from_user_name:
          type: string
          description: 送金ユーザー名
          example: 太郎
        amount_of_money:
          type: integer
          format: int32
          description: 送金金額
          example: 3000
        transferred_on:
          type: string
          format: date
          description: 送金日
          example: "2022-01-01"
    ToRemittanceRecord:
      description: 着金履歴
      type: object
      required:
        - id
        - to_user_name
        - amount_of_money
        - transferred_on
      properties:
        id:
          type: integer
          format: int64
          description: 送金履歴ID
          example: 1
        to_user_name:
          type: string
          description: 着金ユーザー名
          example: 次郎
        amount_of_money:
          type: integer
          format: int32
          description: 送金金額
          example: 3000
        transferred_on:
          type: string
          format: date
          description: 送金日
          example: "2022-01-01"
  requestBodies:
    UserBody:
      description: リクエストユーザー
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: ユーザー名
                example: 太郎
    PaymentGroupBody:
      description: リクエスト支払グループ
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: 支払グループ名
                example: 家族
    UserPaymentGroupsBody:
      description: リクエスト複数ユーザー支払グループ
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - user_id
                - payment_ratio
              properties:
                user_id:
                  type: integer
                  format: int64
                  description: ユーザーID
                  example: 1
                payment_ratio:
                  type: number
                  format: float
                  description: 支払割合
                  example: 0.4
    PurchaseRecordBody:
      description: リクエスト購入履歴
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PurchaseRecordRequestBody"
    PurchaseRecordsBody:
      description: リクエスト複数購入履歴
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PurchaseRecordRequestBody"
    RemittanceRecordBody:
      description: リクエスト送金履歴
      content:
        application/json:
          schema:
            type: object
            required:
              - from_user_payment_group_id
              - to_user_payment_group_id
              - amount_of_money
              - transferred_on
            properties:
              from_user_payment_group_id:
                type: integer
                format: int64
                description: 送金ユーザーID
                example: 1
              to_user_payment_group_id:
                type: integer
                format: int64
                description: 着金ユーザーID
                example: 2
              amount_of_money:
                type: integer
                format: int32
                description: 送金金額
                example: 3000
              transferred_on:
                type: string
                format: date
                description: 送金日
                example: "2022-01-01"
    SignUpBody:
      description: サインアップ
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
              - password_confirmation
            properties:
              name:
                type: string
                description: ユーザー名
                example: 太郎
              email:
                type: string
                format: email
                description: メールアドレス
                example: email@example.com
              password:
                type: string
                format: password
                description: パスワード
                example: password
              password_confirmation:
                type: string
                format: password
                description: 確認用パスワード
                example: password
    SignInBody:
      description: サインイン
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                description: メールアドレス
                example: email@example.com
              password:
                type: string
                format: password
                description: パスワード
                example: password
  parameters:
    UserId:
      name: user_id
      in: path
      description: ユーザーID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    FromUserId:
      name: from_user_id
      in: path
      description: 送金ユーザーID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    ToUserId:
      name: to_user_id
      in: path
      description: 着金ユーザーID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    PaymentGroupId:
      name: payment_group_id
      in: path
      description: 支払グループID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    UserPaymentGroupId:
      name: user_payment_group_id
      in: path
      description: ユーザー支払グループID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    RemittanceRecordId:
      name: remittance_record_id
      in: path
      description: 送金履歴ID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    PurchaseRecordId:
      name: purchase_record_id
      in: path
      description: 購入履歴ID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: access-token
    uid:
      type: apiKey
      in: header
      name: uid
    client:
      type: apiKey
      in: header
      name: client
