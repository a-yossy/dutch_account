/* tslint:disable */
/* eslint-disable */
/**
 * dutch_account_app
 * 割り勘アプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddRemittanceRecordRequest } from '../model';
// @ts-ignore
import { FromRemittanceRecord } from '../model';
// @ts-ignore
import { RemittanceRecord } from '../model';
// @ts-ignore
import { ToRemittanceRecord } from '../model';
/**
 * RemittanceRecordApi - axios parameter creator
 * @export
 */
export const RemittanceRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 送金履歴を作成する
         * @summary 送金履歴作成
         * @param {AddRemittanceRecordRequest} [addRemittanceRecordRequest] リクエスト送金履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRemittanceRecord: async (addRemittanceRecordRequest?: AddRemittanceRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_payment_groups/remittance_records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addRemittanceRecordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 送金履歴IDで送金履歴を削除する
         * @summary 送金履歴削除
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemittanceRecordByRemittanceRecordId: async (remittanceRecordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'remittanceRecordId' is not null or undefined
            assertParamExists('deleteRemittanceRecordByRemittanceRecordId', 'remittanceRecordId', remittanceRecordId)
            const localVarPath = `/remittance_records/{remittance_record_id}`
                .replace(`{${"remittance_record_id"}}`, encodeURIComponent(String(remittanceRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 着金ユーザーIDで全ての送金履歴を取得する
         * @summary 着金ユーザーに紐づく全送金履歴取得
         * @param {number} toUserId 着金ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFromRemittanceRecordsByToUserId: async (toUserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toUserId' is not null or undefined
            assertParamExists('getFromRemittanceRecordsByToUserId', 'toUserId', toUserId)
            const localVarPath = `/users/{to_user_id}/remittance_records`
                .replace(`{${"to_user_id"}}`, encodeURIComponent(String(toUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 送金履歴IDで送金履歴を取得する
         * @summary 送金履歴取得
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemittanceRecordByRemittanceRecordId: async (remittanceRecordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'remittanceRecordId' is not null or undefined
            assertParamExists('getRemittanceRecordByRemittanceRecordId', 'remittanceRecordId', remittanceRecordId)
            const localVarPath = `/remittance_records/{remittance_record_id}`
                .replace(`{${"remittance_record_id"}}`, encodeURIComponent(String(remittanceRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 支払グループIDで全ての送金着金履歴を取得する
         * @summary 支払グループに紐づく全送金着金履歴取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemittanceRecordsByPaymentGroupId: async (paymentGroupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentGroupId' is not null or undefined
            assertParamExists('getRemittanceRecordsByPaymentGroupId', 'paymentGroupId', paymentGroupId)
            const localVarPath = `/payment_groups/{payment_group_id}/remittance_records`
                .replace(`{${"payment_group_id"}}`, encodeURIComponent(String(paymentGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 送金ユーザーIDで全ての着金履歴を取得する
         * @summary 送金ユーザーに紐づく全着金履歴取得
         * @param {number} fromUserId 送金ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToRemittanceRecordsByFromUserId: async (fromUserId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromUserId' is not null or undefined
            assertParamExists('getToRemittanceRecordsByFromUserId', 'fromUserId', fromUserId)
            const localVarPath = `/users/{from_user_id}/remittance_records`
                .replace(`{${"from_user_id"}}`, encodeURIComponent(String(fromUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 送金履歴IDで送金履歴を更新する
         * @summary 送金履歴更新
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {AddRemittanceRecordRequest} [addRemittanceRecordRequest] リクエスト送金履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRemittanceRecordByRemittanceRecordId: async (remittanceRecordId: number, addRemittanceRecordRequest?: AddRemittanceRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'remittanceRecordId' is not null or undefined
            assertParamExists('updateRemittanceRecordByRemittanceRecordId', 'remittanceRecordId', remittanceRecordId)
            const localVarPath = `/remittance_records/{remittance_record_id}`
                .replace(`{${"remittance_record_id"}}`, encodeURIComponent(String(remittanceRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addRemittanceRecordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemittanceRecordApi - functional programming interface
 * @export
 */
export const RemittanceRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RemittanceRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * 送金履歴を作成する
         * @summary 送金履歴作成
         * @param {AddRemittanceRecordRequest} [addRemittanceRecordRequest] リクエスト送金履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRemittanceRecord(addRemittanceRecordRequest?: AddRemittanceRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemittanceRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRemittanceRecord(addRemittanceRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 送金履歴IDで送金履歴を削除する
         * @summary 送金履歴削除
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRemittanceRecordByRemittanceRecordId(remittanceRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 着金ユーザーIDで全ての送金履歴を取得する
         * @summary 着金ユーザーに紐づく全送金履歴取得
         * @param {number} toUserId 着金ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFromRemittanceRecordsByToUserId(toUserId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FromRemittanceRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFromRemittanceRecordsByToUserId(toUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 送金履歴IDで送金履歴を取得する
         * @summary 送金履歴取得
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemittanceRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRemittanceRecordByRemittanceRecordId(remittanceRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 支払グループIDで全ての送金着金履歴を取得する
         * @summary 支払グループに紐づく全送金着金履歴取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRemittanceRecordsByPaymentGroupId(paymentGroupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemittanceRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRemittanceRecordsByPaymentGroupId(paymentGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 送金ユーザーIDで全ての着金履歴を取得する
         * @summary 送金ユーザーに紐づく全着金履歴取得
         * @param {number} fromUserId 送金ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToRemittanceRecordsByFromUserId(fromUserId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ToRemittanceRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToRemittanceRecordsByFromUserId(fromUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 送金履歴IDで送金履歴を更新する
         * @summary 送金履歴更新
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {AddRemittanceRecordRequest} [addRemittanceRecordRequest] リクエスト送金履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, addRemittanceRecordRequest?: AddRemittanceRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemittanceRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRemittanceRecordByRemittanceRecordId(remittanceRecordId, addRemittanceRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RemittanceRecordApi - factory interface
 * @export
 */
export const RemittanceRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RemittanceRecordApiFp(configuration)
    return {
        /**
         * 送金履歴を作成する
         * @summary 送金履歴作成
         * @param {AddRemittanceRecordRequest} [addRemittanceRecordRequest] リクエスト送金履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRemittanceRecord(addRemittanceRecordRequest?: AddRemittanceRecordRequest, options?: any): AxiosPromise<RemittanceRecord> {
            return localVarFp.addRemittanceRecord(addRemittanceRecordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 送金履歴IDで送金履歴を削除する
         * @summary 送金履歴削除
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRemittanceRecordByRemittanceRecordId(remittanceRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 着金ユーザーIDで全ての送金履歴を取得する
         * @summary 着金ユーザーに紐づく全送金履歴取得
         * @param {number} toUserId 着金ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFromRemittanceRecordsByToUserId(toUserId: number, options?: any): AxiosPromise<Array<FromRemittanceRecord>> {
            return localVarFp.getFromRemittanceRecordsByToUserId(toUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 送金履歴IDで送金履歴を取得する
         * @summary 送金履歴取得
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, options?: any): AxiosPromise<RemittanceRecord> {
            return localVarFp.getRemittanceRecordByRemittanceRecordId(remittanceRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 支払グループIDで全ての送金着金履歴を取得する
         * @summary 支払グループに紐づく全送金着金履歴取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemittanceRecordsByPaymentGroupId(paymentGroupId: number, options?: any): AxiosPromise<Array<RemittanceRecord>> {
            return localVarFp.getRemittanceRecordsByPaymentGroupId(paymentGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 送金ユーザーIDで全ての着金履歴を取得する
         * @summary 送金ユーザーに紐づく全着金履歴取得
         * @param {number} fromUserId 送金ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToRemittanceRecordsByFromUserId(fromUserId: number, options?: any): AxiosPromise<Array<ToRemittanceRecord>> {
            return localVarFp.getToRemittanceRecordsByFromUserId(fromUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 送金履歴IDで送金履歴を更新する
         * @summary 送金履歴更新
         * @param {number} remittanceRecordId 送金履歴ID
         * @param {AddRemittanceRecordRequest} [addRemittanceRecordRequest] リクエスト送金履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, addRemittanceRecordRequest?: AddRemittanceRecordRequest, options?: any): AxiosPromise<RemittanceRecord> {
            return localVarFp.updateRemittanceRecordByRemittanceRecordId(remittanceRecordId, addRemittanceRecordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RemittanceRecordApi - object-oriented interface
 * @export
 * @class RemittanceRecordApi
 * @extends {BaseAPI}
 */
export class RemittanceRecordApi extends BaseAPI {
    /**
     * 送金履歴を作成する
     * @summary 送金履歴作成
     * @param {AddRemittanceRecordRequest} [addRemittanceRecordRequest] リクエスト送金履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittanceRecordApi
     */
    public addRemittanceRecord(addRemittanceRecordRequest?: AddRemittanceRecordRequest, options?: AxiosRequestConfig) {
        return RemittanceRecordApiFp(this.configuration).addRemittanceRecord(addRemittanceRecordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 送金履歴IDで送金履歴を削除する
     * @summary 送金履歴削除
     * @param {number} remittanceRecordId 送金履歴ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittanceRecordApi
     */
    public deleteRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, options?: AxiosRequestConfig) {
        return RemittanceRecordApiFp(this.configuration).deleteRemittanceRecordByRemittanceRecordId(remittanceRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 着金ユーザーIDで全ての送金履歴を取得する
     * @summary 着金ユーザーに紐づく全送金履歴取得
     * @param {number} toUserId 着金ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittanceRecordApi
     */
    public getFromRemittanceRecordsByToUserId(toUserId: number, options?: AxiosRequestConfig) {
        return RemittanceRecordApiFp(this.configuration).getFromRemittanceRecordsByToUserId(toUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 送金履歴IDで送金履歴を取得する
     * @summary 送金履歴取得
     * @param {number} remittanceRecordId 送金履歴ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittanceRecordApi
     */
    public getRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, options?: AxiosRequestConfig) {
        return RemittanceRecordApiFp(this.configuration).getRemittanceRecordByRemittanceRecordId(remittanceRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 支払グループIDで全ての送金着金履歴を取得する
     * @summary 支払グループに紐づく全送金着金履歴取得
     * @param {number} paymentGroupId 支払グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittanceRecordApi
     */
    public getRemittanceRecordsByPaymentGroupId(paymentGroupId: number, options?: AxiosRequestConfig) {
        return RemittanceRecordApiFp(this.configuration).getRemittanceRecordsByPaymentGroupId(paymentGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 送金ユーザーIDで全ての着金履歴を取得する
     * @summary 送金ユーザーに紐づく全着金履歴取得
     * @param {number} fromUserId 送金ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittanceRecordApi
     */
    public getToRemittanceRecordsByFromUserId(fromUserId: number, options?: AxiosRequestConfig) {
        return RemittanceRecordApiFp(this.configuration).getToRemittanceRecordsByFromUserId(fromUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 送金履歴IDで送金履歴を更新する
     * @summary 送金履歴更新
     * @param {number} remittanceRecordId 送金履歴ID
     * @param {AddRemittanceRecordRequest} [addRemittanceRecordRequest] リクエスト送金履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittanceRecordApi
     */
    public updateRemittanceRecordByRemittanceRecordId(remittanceRecordId: number, addRemittanceRecordRequest?: AddRemittanceRecordRequest, options?: AxiosRequestConfig) {
        return RemittanceRecordApiFp(this.configuration).updateRemittanceRecordByRemittanceRecordId(remittanceRecordId, addRemittanceRecordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
