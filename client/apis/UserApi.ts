/* tslint:disable */
/* eslint-disable */
/**
 * dutch-account-app
 * 割り勘計算アプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUserRequest,
  User,
} from '../models';
import {
    AddUserRequestFromJSON,
    AddUserRequestToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AddUserOperationRequest {
    addUserRequest?: AddUserRequest;
}

export interface GetUserByUserIdRequest {
    userId: number;
}

export interface UpdateUserByUserIdRequest {
    userId: number;
    addUserRequest?: AddUserRequest;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * ユーザを作成する
     * ユーザ作成API
     */
    async addUserRaw(requestParameters: AddUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserRequestToJSON(requestParameters.addUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * ユーザを作成する
     * ユーザ作成API
     */
    async addUser(requestParameters: AddUserOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.addUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザIDでユーザ情報を取得する
     * ユーザ情報取得API
     */
    async getUserByUserIdRaw(requestParameters: GetUserByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * ユーザIDでユーザ情報を取得する
     * ユーザ情報取得API
     */
    async getUserByUserId(requestParameters: GetUserByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 全てのユーザ情報を取得する
     * 全ユーザ情報取得API
     */
    async getUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * 全てのユーザ情報を取得する
     * 全ユーザ情報取得API
     */
    async getUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.getUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * ユーザIDでユーザ情報を更新する
     * ユーザ更新API
     */
    async updateUserByUserIdRaw(requestParameters: UpdateUserByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUserByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserRequestToJSON(requestParameters.addUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * ユーザIDでユーザ情報を更新する
     * ユーザ更新API
     */
    async updateUserByUserId(requestParameters: UpdateUserByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.updateUserByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
