openapi: 3.0.0
info:
  version: 1.0.0
  title: dutch_account_app
  description: 割り勘アプリ
servers:
  - url: http://localhost:8000/api/v1
    description: 開発環境
tags:
  - name: managementGroup
  - name: managementAffiliation
  - name: paymentGroup
  - name: paymentAffiliation
  - name: paymentRelation
  - name: debtRecord
  - name: user
security:
  - accessToken: []
    uid: []
    client: []
paths:
  /management_groups:
    get:
      tags:
        - managementGroup
      summary: 全ての管理グループを取得
      description: ログインしているユーザーに紐づく全ての管理グループを取得する
      operationId: getManagementGroups
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ManagementGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - managementGroup
      summary: 管理グループを作成
      description: 管理グループを作成する
      operationId: addManagementGroup
      requestBody:
        $ref: "#/components/requestBodies/ManagementGroupBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagementGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /management_groups/{management_group_id}:
    parameters:
      - $ref: "#/components/parameters/ManagementGroupId"
    get:
      tags:
        - managementGroup
      summary: 管理グループを取得
      description: ログインしているユーザーに紐づく管理グループを取得する
      operationId: getManagementGroupByManagementGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManagementGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /management_groups/{management_group_id}/users:
    parameters:
      - $ref: "#/components/parameters/ManagementGroupId"
    get:
      tags:
        - managementAffiliation
      summary: 管理グループに所属する全てのユーザーを取得
      description: 管理グループに所属する全てのユーザーを取得する
      operationId: getManagementAffiliationUsersByManagementGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 2
                example:
                  - id: 1
                    name: 太郎
                  - id: 2
                    name: 次郎
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
            $ref: "#/components/responses/InternalServerError"
  /management_groups/{management_group_id}/payment_groups:
    parameters:
      - $ref: "#/components/parameters/ManagementGroupId"
    get:
      tags:
        - paymentGroup
      summary: 管理グループに紐づく全ての支払グループを取得
      description: 管理グループに紐づく全ての支払グループを取得する
      operationId: getPaymentGroupsByManagementGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /management_groups/{management_group_id}/payment_groups/{payment_group_id}:
    parameters:
      - $ref: "#/components/parameters/ManagementGroupId"
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - paymentGroup
      summary: 管理グループに紐づく支払グループを取得
      description: 管理グループに紐づく支払グループを取得する
      operationId: getPaymentGroupByManagementGroupIdAndPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - paymentGroup
      summary: 管理グループに紐づく支払グループを更新
      description: 管理グループに紐づく支払グループを更新する
      operationId: updatePaymentGroupByPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/PaymentGroupBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - paymentGroup
      summary: 管理グループに紐づく支払グループを削除
      description: 管理グループに紐づく支払グループを削除する
      operationId: deletePaymentGroupByPaymentGroupId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /management_groups/{management_group_id}/payment_relations/bulk_insert:
    parameters:
      - $ref: "#/components/parameters/ManagementGroupId"
    post:
      tags:
        - paymentRelation
      summary: 管理グループに紐づく支払グループを作成し複数のユーザーを所属させる
      description: 管理グループに紐づく支払グループを作成し複数のユーザーを所属させる
      operationId: addPaymentRelationByManagementGroupId
      requestBody:
        $ref: "#/components/requestBodies/PaymentRelationBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentRelation"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /management_groups/{management_group_id}/payment_groups/{payment_group_id}/payment_affiliations:
    parameters:
      - $ref: "#/components/parameters/ManagementGroupId"
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - paymentAffiliation
      summary: 支払グループに所属する全てのユーザーを取得
      description: 支払グループに所属する全てのユーザーを取得する
      operationId: getPaymentAffiliationsByManagementGroupIdAndPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentAffiliation"
                minItems: 2
                example:
                  - user:
                      id: 1
                      name: 太郎
                    ratio: 0.5
                  - user:
                      id: 2
                      name: 次郎
                    ratio: 0.5
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /management_groups/{management_group_id}/payment_groups/{payment_group_id}/payment_affiliations/bulk_update:
    parameters:
      - $ref: "#/components/parameters/ManagementGroupId"
      - $ref: "#/components/parameters/PaymentGroupId"
    put:
      tags:
        - paymentAffiliation
      summary: 複数のユーザーの支払グループへの所属情報を更新
      description: 複数のユーザーの支払グループへの所属情報を更新する
      operationId: updatePaymentAffiliationsByManagementGroupIdAndPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/PaymentAffiliationsBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentAffiliation"
                minItems: 2
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{lending_user_id}/borrowing_user_debt_records:
    parameters:
      - $ref: "#/components/parameters/LendingUserId"
    get:
      tags:
        - debtRecord
      summary: 貸主に紐づく全ての借金履歴及び借主名を取得
      description: 貸主に紐づく全ての借金履歴及び借主名を取得する
      operationId: getBorrowingUserDebtRecordsByLendingUserId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BorrowingUserDebtRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/debt_records/bulk_insert:
    post:
      tags:
        - debtRecord
      summary: 借金履歴を複数作成
      description: 借金履歴を複数作成する
      operationId: addDebtRecords
      requestBody:
        $ref: "#/components/requestBodies/DebtRecordsBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDebtRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /user_debt_records/{debt_record_id}:
    parameters:
      - $ref: "#/components/parameters/DebtRecordId"
    get:
      tags:
        - debtRecord
      summary: 借金履歴及びユーザー名を取得
      description: 借金履歴及びユーザー名を取得する
      operationId: getUserDebtRecordByDebtRecordId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDebtRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /debt_records/{debt_record_id}:
    parameters:
      - $ref: "#/components/parameters/DebtRecordId"
    delete:
      tags:
        - debtRecord
      summary: 借金履歴を削除
      description: 借金履歴を削除する
      operationId: deleteDebtRecordByDebtRecordId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /current_user:
    get:
      tags:
        - user
      summary: ログインしているユーザーを取得
      description: ログインしているユーザーを取得する
      operationId: getCurrentUser
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /sign_up:
    post:
      tags:
        - user
      summary: サインアップ
      description: サインアップする
      operationId: signUp
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignUpBody"
      responses:
        200:
          description: サインアップに成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            access-token:
              $ref: "#/components/headers/access-token"
            uid:
              $ref: "#/components/headers/uid"
            client:
              $ref: "#/components/headers/client"
        422:
          $ref: "#/components/responses/UnprocessableEntity"
        500:
          $ref: "#/components/responses/InternalServerError"
  /log_in:
    post:
      tags:
        - user
      summary: ログイン
      description: ログインする
      operationId: logIn
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignInBody"
      responses:
        200:
          description: ログインに成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            access-token:
              $ref: "#/components/headers/access-token"
            uid:
              $ref: "#/components/headers/uid"
            client:
              $ref: "#/components/headers/client"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /log_out:
    delete:
      tags:
        - user
      summary: ログアウト
      description: ログアウトする
      operationId: logOut
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    NoContent:
      description: リクエストが成功し、返すリソースがない時のレスポンス
    BadRequest:
      description: リクエストパラメーターに不備がある時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
          example:
            messages: [リクエストパラメーターに不備があります]
    Unauthorized:
      description: 認証されていない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
          example:
            messages: [ログインしてください]
    NotFound:
      description: リクエストされたリソースが存在しない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
          example:
            messages: [ページが見つかりません]
    UnprocessableEntity:
      description: リクエストされた指示を処理できなかった時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
          example:
            messages: [このアカウントはすでに存在しています]
    InternalServerError:
      description: サーバーでエラーが発生している時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
          example:
            messages: [サーバーでエラーが発生しています]
  headers:
    access-token:
      description: パスワードとして機能する
      schema:
        type: string
    uid:
      description: ユーザーを識別するために使用する
      schema:
        type: string
    client:
      description: 異なるクライアントで認証を行うために使用する
      schema:
        type: string
  schemas:
    ResponseError:
      description: エラー
      type: object
      required:
        - messages
      additionalProperties: false
      properties:
        messages:
          type: array
          items:
            type: string
          description: エラーメッセージ
          example: エラーが発生しました
    User:
      description: ユーザー
      type: object
      required:
        - id
        - name
      additionalProperties: false
      properties:
        id:
          type: string
          description: ユーザーID
          example: 1
        name:
          type: string
          description: ユーザー名
          example: 太郎
    PaymentGroup:
      description: 支払グループ
      type: object
      required:
        - id
        - name
      additionalProperties: false
      properties:
        id:
          type: string
          description: 支払グループID
          example: 1
        name:
          type: string
          description: 支払グループ名
          example: 兄弟
    PaymentAffiliation:
      description: 支払グループ所属情報
      type: object
      required:
        - user
        - ratio
      additionalProperties: false
      properties:
        user:
          $ref: "#/components/schemas/User"
        ratio:
          type: number
          format: float
          description: 支払割合
          example: 0.4
    PaymentRelation:
      description: 支払グループと支払グループ所属情報の配列
      type: object
      required:
        - group
        - affiliations
      additionalProperties: false
      properties:
        group:
          $ref: "#/components/schemas/PaymentGroup"
        affiliations:
          type: array
          items:
            $ref: "#/components/schemas/PaymentAffiliation"
          minItems: 2
          example:
            - user:
                id: 1
                name: 太郎
              ratio: 0.5
            - user:
                id: 2
                name: 次郎
              ratio: 0.5
    UserDebtRecord:
      description: 借金履歴及びユーザー名
      type: object
      required:
        - id
        - lending_user_name
        - borrowing_user_name
        - amount_of_money
        - description
        - transacted_on
      additionalProperties: false
      properties:
        id:
          type: string
          description: 借金履歴ID
          example: 1
        lending_user_name:
          type: string
          description: 貸主名
          example: 太郎
        borrowing_user_name:
          type: string
          description: 借主名
          example: 次郎
        amount_of_money:
          type: integer
          format: int32
          description: 金額
          example: 3000
        description:
          type: string
          description: 説明
          example: 食材
        transacted_on:
          type: string
          format: date
          description: 取引日
          example: "2022-01-01"
    BorrowingUserDebtRecord:
      description: 借金履歴及び借主名
      type: object
      required:
        - id
        - borrowing_user_name
        - amount_of_money
        - description
        - transacted_on
      additionalProperties: false
      properties:
        id:
          type: string
          description: 借金履歴ID
          example: 1
        borrowing_user_name:
          type: integer
          format: int64
          description: 借主名
          example: 次郎
        amount_of_money:
          type: integer
          format: int32
          description: 金額
          example: 3000
        description:
          type: string
          description: 説明
          example: 食材
        transacted_on:
          type: string
          format: date
          description: 取引日
          example: "2022-01-01"
    ManagementGroup:
      description: 管理グループ
      type: object
      required:
        - id
        - name
      additionalProperties: false
      properties:
        id:
          type: string
          description: 管理グループID
          example: 1
        name:
          type: string
          description: 管理グループ名
          example: 家族
  requestBodies:
    PaymentGroupBody:
      description: リクエスト用の支払グループ
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: 支払グループ名
                example: 兄弟
    PaymentAffiliationsBody:
      description: リクエスト用の支払グループの所属情報の配列
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - user_id
                - ratio
              properties:
                user_id:
                  type: string
                  description: ユーザーID
                  example: 1
                ratio:
                  type: number
                  format: float
                  description: 支払割合
                  example: 0.4
    PaymentRelationBody:
      description: リクエスト用の支払グループと支払グループの所属情報の配列
      content:
        application/json:
          schema:
            type: object
            required:
              - group
              - affiliations
            properties:
              group:
                description: 支払グループ
                type: object
                required:
                  - name
                properties:
                  name:
                    type: string
                    description: グループ名
                    example: 兄弟
              affiliations:
                description: 支払グループの所属情報の配列
                type: array
                items:
                  type: object
                  required:
                    - user_id
                    - ratio
                  properties:
                    user_id:
                      type: string
                      description: ユーザーID
                      example: 1
                    ratio:
                      type: number
                      format: float
                      description: 支払割合
                      example: 0.4
                minItems: 2
                example:
                  - user_id: 1
                    ratio: 0.5
                  - user_id: 2
                    ratio: 0.5
    DebtRecordsBody:
      description: リクエスト用の借金履歴の配列
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - lending_user_id
                - borrowing_user_id
                - amount_of_money
                - description
                - transacted_on
              properties:
                lending_user_id:
                    type: string
                    description: 貸主ID
                    example: 1
                borrowing_user_id:
                    type: string
                    description: 借主ID
                    example: 2
                amount_of_money:
                  type: integer
                  format: int32
                  description: 金額
                  example: 3000
                description:
                  type: string
                  description: 説明
                  example: 食材
                transacted_on:
                  type: string
                  format: date
                  description: 取引日
                  example: "2022-01-01"
    ManagementGroupBody:
      description: リクエスト用の管理グループ
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: 管理グループ名
                example: 家族
    SignUpBody:
      description: サインアップ用のユーザー
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                description: ユーザー名
                example: 太郎
              email:
                type: string
                format: email
                description: メールアドレス
                example: email@example.com
              password:
                type: string
                format: password
                description: パスワード
                example: password
    SignInBody:
      description: ログイン用のユーザー
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                description: メールアドレス
                example: email@example.com
              password:
                type: string
                format: password
                description: パスワード
                example: password
  parameters:
    LendingUserId:
      name: lending_user_id
      in: path
      description: 貸主ID
      required: true
      schema:
        type: string
        example: 1
    PaymentGroupId:
      name: payment_group_id
      in: path
      description: 支払グループID
      required: true
      schema:
        type: string
        example: 1
    DebtRecordId:
      name: debt_record_id
      in: path
      description: 借金履歴ID
      required: true
      schema:
        type: string
        example: 1
    ManagementGroupId:
      name: management_group_id
      in: path
      description: 管理グループID
      required: true
      schema:
        type: string
        example: 1
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: access-token
    uid:
      type: apiKey
      in: header
      name: uid
    client:
      type: apiKey
      in: header
      name: client
