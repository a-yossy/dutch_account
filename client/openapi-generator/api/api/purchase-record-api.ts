/* tslint:disable */
/* eslint-disable */
/**
 * dutch_account_app
 * 割り勘アプリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PurchaseRecord } from '../model';
// @ts-ignore
import { PurchaseRecordRequestBody } from '../model';
/**
 * PurchaseRecordApi - axios parameter creator
 * @export
 */
export const PurchaseRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 購入履歴を複数作成する
         * @summary 購入履歴複数作成
         * @param {Array<PurchaseRecordRequestBody>} [purchaseRecordRequestBody] リクエスト複数購入履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPurchaseRecords: async (purchaseRecordRequestBody?: Array<PurchaseRecordRequestBody>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user_payment_groups/purchase_records/bulk_insert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseRecordRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 購入履歴IDで購入履歴を削除する
         * @summary 購入履歴削除
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchaseRecordByPurchaseRecordId: async (purchaseRecordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseRecordId' is not null or undefined
            assertParamExists('deletePurchaseRecordByPurchaseRecordId', 'purchaseRecordId', purchaseRecordId)
            const localVarPath = `/purchase_records/{purchase_record_id}`
                .replace(`{${"purchase_record_id"}}`, encodeURIComponent(String(purchaseRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 購入履歴IDで購入履歴を取得する
         * @summary 購入履歴取得
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseRecordByPurchaseRecordId: async (purchaseRecordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseRecordId' is not null or undefined
            assertParamExists('getPurchaseRecordByPurchaseRecordId', 'purchaseRecordId', purchaseRecordId)
            const localVarPath = `/purchase_records/{purchase_record_id}`
                .replace(`{${"purchase_record_id"}}`, encodeURIComponent(String(purchaseRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 支払グループIDで全ての購入履歴を取得する
         * @summary 支払グループに紐づく全購入履歴取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseRecordsByPaymentGroupId: async (paymentGroupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentGroupId' is not null or undefined
            assertParamExists('getPurchaseRecordsByPaymentGroupId', 'paymentGroupId', paymentGroupId)
            const localVarPath = `/payment_groups/{payment_group_id}/purchase_records`
                .replace(`{${"payment_group_id"}}`, encodeURIComponent(String(paymentGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーIDで全ての購入履歴を取得する
         * @summary ユーザーに紐づく全購入履歴取得
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseRecordsByUserId: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPurchaseRecordsByUserId', 'userId', userId)
            const localVarPath = `/users/{user_id}/purchase_records`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザー支払グループIDで全ての購入履歴を取得する
         * @summary ユーザー支払グループに紐づく全購入履歴取得
         * @param {number} userPaymentGroupId ユーザー支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseRecordsByUserPaymentGroupId: async (userPaymentGroupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userPaymentGroupId' is not null or undefined
            assertParamExists('getPurchaseRecordsByUserPaymentGroupId', 'userPaymentGroupId', userPaymentGroupId)
            const localVarPath = `/user_payment_groups/{user_payment_group_id}/purchase_records`
                .replace(`{${"user_payment_group_id"}}`, encodeURIComponent(String(userPaymentGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 購入履歴IDで購入履歴を更新する
         * @summary 購入履歴更新
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {PurchaseRecordRequestBody} [purchaseRecordRequestBody] リクエスト購入履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePurchaseRecordByPurchaseRecordId: async (purchaseRecordId: number, purchaseRecordRequestBody?: PurchaseRecordRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseRecordId' is not null or undefined
            assertParamExists('updatePurchaseRecordByPurchaseRecordId', 'purchaseRecordId', purchaseRecordId)
            const localVarPath = `/purchase_records/{purchase_record_id}`
                .replace(`{${"purchase_record_id"}}`, encodeURIComponent(String(purchaseRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseRecordRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseRecordApi - functional programming interface
 * @export
 */
export const PurchaseRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * 購入履歴を複数作成する
         * @summary 購入履歴複数作成
         * @param {Array<PurchaseRecordRequestBody>} [purchaseRecordRequestBody] リクエスト複数購入履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPurchaseRecords(purchaseRecordRequestBody?: Array<PurchaseRecordRequestBody>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PurchaseRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPurchaseRecords(purchaseRecordRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 購入履歴IDで購入履歴を削除する
         * @summary 購入履歴削除
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePurchaseRecordByPurchaseRecordId(purchaseRecordId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePurchaseRecordByPurchaseRecordId(purchaseRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 購入履歴IDで購入履歴を取得する
         * @summary 購入履歴取得
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseRecordByPurchaseRecordId(purchaseRecordId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseRecordByPurchaseRecordId(purchaseRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 支払グループIDで全ての購入履歴を取得する
         * @summary 支払グループに紐づく全購入履歴取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseRecordsByPaymentGroupId(paymentGroupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PurchaseRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseRecordsByPaymentGroupId(paymentGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーIDで全ての購入履歴を取得する
         * @summary ユーザーに紐づく全購入履歴取得
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseRecordsByUserId(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PurchaseRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseRecordsByUserId(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザー支払グループIDで全ての購入履歴を取得する
         * @summary ユーザー支払グループに紐づく全購入履歴取得
         * @param {number} userPaymentGroupId ユーザー支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseRecordsByUserPaymentGroupId(userPaymentGroupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PurchaseRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseRecordsByUserPaymentGroupId(userPaymentGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 購入履歴IDで購入履歴を更新する
         * @summary 購入履歴更新
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {PurchaseRecordRequestBody} [purchaseRecordRequestBody] リクエスト購入履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePurchaseRecordByPurchaseRecordId(purchaseRecordId: number, purchaseRecordRequestBody?: PurchaseRecordRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePurchaseRecordByPurchaseRecordId(purchaseRecordId, purchaseRecordRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PurchaseRecordApi - factory interface
 * @export
 */
export const PurchaseRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseRecordApiFp(configuration)
    return {
        /**
         * 購入履歴を複数作成する
         * @summary 購入履歴複数作成
         * @param {Array<PurchaseRecordRequestBody>} [purchaseRecordRequestBody] リクエスト複数購入履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPurchaseRecords(purchaseRecordRequestBody?: Array<PurchaseRecordRequestBody>, options?: any): AxiosPromise<Array<PurchaseRecord>> {
            return localVarFp.addPurchaseRecords(purchaseRecordRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 購入履歴IDで購入履歴を削除する
         * @summary 購入履歴削除
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchaseRecordByPurchaseRecordId(purchaseRecordId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePurchaseRecordByPurchaseRecordId(purchaseRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 購入履歴IDで購入履歴を取得する
         * @summary 購入履歴取得
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseRecordByPurchaseRecordId(purchaseRecordId: number, options?: any): AxiosPromise<PurchaseRecord> {
            return localVarFp.getPurchaseRecordByPurchaseRecordId(purchaseRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 支払グループIDで全ての購入履歴を取得する
         * @summary 支払グループに紐づく全購入履歴取得
         * @param {number} paymentGroupId 支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseRecordsByPaymentGroupId(paymentGroupId: number, options?: any): AxiosPromise<Array<PurchaseRecord>> {
            return localVarFp.getPurchaseRecordsByPaymentGroupId(paymentGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーIDで全ての購入履歴を取得する
         * @summary ユーザーに紐づく全購入履歴取得
         * @param {number} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseRecordsByUserId(userId: number, options?: any): AxiosPromise<Array<PurchaseRecord>> {
            return localVarFp.getPurchaseRecordsByUserId(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザー支払グループIDで全ての購入履歴を取得する
         * @summary ユーザー支払グループに紐づく全購入履歴取得
         * @param {number} userPaymentGroupId ユーザー支払グループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseRecordsByUserPaymentGroupId(userPaymentGroupId: number, options?: any): AxiosPromise<Array<PurchaseRecord>> {
            return localVarFp.getPurchaseRecordsByUserPaymentGroupId(userPaymentGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 購入履歴IDで購入履歴を更新する
         * @summary 購入履歴更新
         * @param {number} purchaseRecordId 購入履歴ID
         * @param {PurchaseRecordRequestBody} [purchaseRecordRequestBody] リクエスト購入履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePurchaseRecordByPurchaseRecordId(purchaseRecordId: number, purchaseRecordRequestBody?: PurchaseRecordRequestBody, options?: any): AxiosPromise<PurchaseRecord> {
            return localVarFp.updatePurchaseRecordByPurchaseRecordId(purchaseRecordId, purchaseRecordRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PurchaseRecordApi - object-oriented interface
 * @export
 * @class PurchaseRecordApi
 * @extends {BaseAPI}
 */
export class PurchaseRecordApi extends BaseAPI {
    /**
     * 購入履歴を複数作成する
     * @summary 購入履歴複数作成
     * @param {Array<PurchaseRecordRequestBody>} [purchaseRecordRequestBody] リクエスト複数購入履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRecordApi
     */
    public addPurchaseRecords(purchaseRecordRequestBody?: Array<PurchaseRecordRequestBody>, options?: AxiosRequestConfig) {
        return PurchaseRecordApiFp(this.configuration).addPurchaseRecords(purchaseRecordRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 購入履歴IDで購入履歴を削除する
     * @summary 購入履歴削除
     * @param {number} purchaseRecordId 購入履歴ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRecordApi
     */
    public deletePurchaseRecordByPurchaseRecordId(purchaseRecordId: number, options?: AxiosRequestConfig) {
        return PurchaseRecordApiFp(this.configuration).deletePurchaseRecordByPurchaseRecordId(purchaseRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 購入履歴IDで購入履歴を取得する
     * @summary 購入履歴取得
     * @param {number} purchaseRecordId 購入履歴ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRecordApi
     */
    public getPurchaseRecordByPurchaseRecordId(purchaseRecordId: number, options?: AxiosRequestConfig) {
        return PurchaseRecordApiFp(this.configuration).getPurchaseRecordByPurchaseRecordId(purchaseRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 支払グループIDで全ての購入履歴を取得する
     * @summary 支払グループに紐づく全購入履歴取得
     * @param {number} paymentGroupId 支払グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRecordApi
     */
    public getPurchaseRecordsByPaymentGroupId(paymentGroupId: number, options?: AxiosRequestConfig) {
        return PurchaseRecordApiFp(this.configuration).getPurchaseRecordsByPaymentGroupId(paymentGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーIDで全ての購入履歴を取得する
     * @summary ユーザーに紐づく全購入履歴取得
     * @param {number} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRecordApi
     */
    public getPurchaseRecordsByUserId(userId: number, options?: AxiosRequestConfig) {
        return PurchaseRecordApiFp(this.configuration).getPurchaseRecordsByUserId(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザー支払グループIDで全ての購入履歴を取得する
     * @summary ユーザー支払グループに紐づく全購入履歴取得
     * @param {number} userPaymentGroupId ユーザー支払グループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRecordApi
     */
    public getPurchaseRecordsByUserPaymentGroupId(userPaymentGroupId: number, options?: AxiosRequestConfig) {
        return PurchaseRecordApiFp(this.configuration).getPurchaseRecordsByUserPaymentGroupId(userPaymentGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 購入履歴IDで購入履歴を更新する
     * @summary 購入履歴更新
     * @param {number} purchaseRecordId 購入履歴ID
     * @param {PurchaseRecordRequestBody} [purchaseRecordRequestBody] リクエスト購入履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseRecordApi
     */
    public updatePurchaseRecordByPurchaseRecordId(purchaseRecordId: number, purchaseRecordRequestBody?: PurchaseRecordRequestBody, options?: AxiosRequestConfig) {
        return PurchaseRecordApiFp(this.configuration).updatePurchaseRecordByPurchaseRecordId(purchaseRecordId, purchaseRecordRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}
