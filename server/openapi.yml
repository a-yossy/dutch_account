openapi: 3.0.0
info:
  version: 1.0.0
  title: dutch_account_app
  description: 割り勘アプリ
servers:
  - url: http://localhost:8000/api/v1
    description: 開発環境
tags:
  - name: paymentGroup
  - name: affiliation
  - name: debtRecord
  - name: remittanceRecord
  - name: user
security:
  - accessToken: []
    uid: []
    client: []
paths:
  /payment_groups:
    get:
      tags:
        - paymentGroup
      summary: 全支払グループ取得
      description: 全ての支払グループを取得する
      operationId: getPaymentGroups
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - paymentGroup
      summary: 支払グループ作成
      description: 支払グループを作成する
      operationId: addPaymentGroup
      requestBody:
        $ref: "#/components/requestBodies/PaymentGroupBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - paymentGroup
      summary: 支払グループ取得
      description: 支払グループIDで支払グループを取得する
      operationId: getPaymentGroupByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - paymentGroup
      summary: 支払グループ更新
      description: 支払グループIDで支払グループを更新する
      operationId: updatePaymentGroupByPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/PaymentGroupBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentGroup"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - paymentGroup
      summary: 支払グループ削除
      description: 支払グループIDで支払グループを削除する
      operationId: deletePaymentGroupByPaymentGroupId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/affiliations:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - affiliation
      summary: 支払グループに紐づく全所属取得
      description: 支払グループIDで全ての所属を取得する
      operationId: getAffiliationsByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Affiliation"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /affiliations/{affiliation_id}:
    parameters:
      - $ref: "#/components/parameters/AffiliationId"
    get:
      tags:
        - affiliation
      summary: 所属取得
      description: 所属IDで所属を取得する
      operationId: getAffiliationByAffiliationId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Affiliation"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/affiliations/bulk_insert:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    post:
      tags:
        - affiliation
      summary: 所属複数作成
      description: 支払グループIDで所属を複数作成する
      operationId: addAffiliationsByPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/AffiliationsBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Affiliation"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/affiliations/bulk_update:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    put:
      tags:
        - affiliation
      summary: 所属複数更新
      description: 支払グループIDで所属を複数更新する
      operationId: updateAffiliationsByPaymentGroupId
      requestBody:
        $ref: "#/components/requestBodies/AffiliationsBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Affiliation"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /debt_records:
    get:
      tags:
        - debtRecord
      summary: 全借金履歴取得
      description: 全ての借金履歴を取得する
      operationId: getDebtRecords
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DebtRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/debt_records/bulk_insert:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    post:
      tags:
        - debtRecord
      summary: 借金履歴複数作成
      description: 支払グループIDで借金履歴を複数作成する
      operationId: addDebtRecords
      requestBody:
        $ref: "#/components/requestBodies/DebtRecordsBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DebtRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /debt_records/{debt_record_id}:
    parameters:
      - $ref: "#/components/parameters/DebtRecordId"
    get:
      tags:
        - debtRecord
      summary: 借金履歴取得
      description: 借金履歴IDで借金履歴を取得する
      operationId: getDebtRecordByDebtRecordId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DebtRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - debtRecord
      summary: 借金履歴削除
      description: 借金履歴IDで借金履歴を削除する
      operationId: deleteDebtRecordByDebtRecordId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /payment_groups/{payment_group_id}/remittance_records:
    parameters:
      - $ref: "#/components/parameters/PaymentGroupId"
    get:
      tags:
        - remittanceRecord
      summary: 支払グループに紐づく全送金着金履歴取得
      description: 支払グループIDで全ての送金着金履歴を取得する
      operationId: getRemittanceRecordsByPaymentGroupId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RemittanceRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{from_user_id}/remittance_records:
    parameters:
      - $ref: "#/components/parameters/FromUserId"
    get:
      tags:
        - remittanceRecord
      summary: 送金ユーザーに紐づく全着金履歴取得
      description: 送金ユーザーIDで全ての着金履歴を取得する
      operationId: getToRemittanceRecordsByFromUserId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToRemittanceRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{to_user_id}/remittance_records:
    parameters:
      - $ref: "#/components/parameters/ToUserId"
    get:
      tags:
        - remittanceRecord
      summary: 着金ユーザーに紐づく全送金履歴取得
      description: 着金ユーザーIDで全ての送金履歴を取得する
      operationId: getFromRemittanceRecordsByToUserId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FromRemittanceRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /affiliations/remittance_records:
    post:
      tags:
        - remittanceRecord
      summary: 送金履歴作成
      description: 送金履歴を作成する
      operationId: addRemittanceRecord
      requestBody:
        $ref: "#/components/requestBodies/RemittanceRecordBody"
      responses:
        201:
          description: 作成が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemittanceRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /remittance_records/{remittance_record_id}:
    parameters:
      - $ref: "#/components/parameters/RemittanceRecordId"
    get:
      tags:
        - remittanceRecord
      summary: 送金履歴取得
      description: 送金履歴IDで送金履歴を取得する
      operationId: getRemittanceRecordByRemittanceRecordId
      responses:
        200:
          description: 取得が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemittanceRecord"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - remittanceRecord
      summary: 送金履歴更新
      description: 送金履歴IDで送金履歴を更新する
      operationId: updateRemittanceRecordByRemittanceRecordId
      requestBody:
        $ref: "#/components/requestBodies/RemittanceRecordBody"
      responses:
        200:
          description: 更新が成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemittanceRecord"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - remittanceRecord
      summary: 送金履歴削除
      description: 送金履歴IDで送金履歴を削除する
      operationId: deleteRemittanceRecordByRemittanceRecordId
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /sign_up:
    post:
      tags:
        - user
      summary: サインアップ
      description: サインアップする
      operationId: signUp
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignUpBody"
      responses:
        200:
          description: サインアップに成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            access-token:
              $ref: "#/components/headers/access-token"
            uid:
              $ref: "#/components/headers/uid"
            client:
              $ref: "#/components/headers/client"
        422:
          $ref: "#/components/responses/UnprocessableEntity"
        500:
          $ref: "#/components/responses/InternalServerError"
  /sign_in:
    post:
      tags:
        - user
      summary: サインイン
      description: サインインする
      operationId: signIn
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignInBody"
      responses:
        200:
          description: サインインに成功した時のレスポンス
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            access-token:
              $ref: "#/components/headers/access-token"
            uid:
              $ref: "#/components/headers/uid"
            client:
              $ref: "#/components/headers/client"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /sign_out:
    post:
      tags:
        - user
      summary: サインアウト
      description: サインアウトする
      operationId: signOut
      responses:
        200:
          description: サインアウトに成功した時のレスポンス
          content:
            {}
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    NoContent:
      description: リクエストが成功し、返すリソースがない時のレスポンス
      content:
        {}
    BadRequest:
      description: リクエストパラメーターに不備がある時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            messages: [リクエストパラメーターに不備があります]
    Unauthorized:
      description: 認証されていない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            messages: [アクセス権限がありません]
    NotFound:
      description: リクエストされたリソースが存在しない時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            messages: [ページが見つかりません]
    UnprocessableEntity:
      description: リクエストされた指示を処理できなかった時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            messages: [このアカウントはすでに存在しています]
    InternalServerError:
      description: サーバーでエラーが発生している時のレスポンス
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            messages: [サーバーでエラーが発生しています]
  headers:
    access-token:
      description: パスワードとして機能する
      schema:
        type: string
    uid:
      description: ユーザーを識別するために使用する
      schema:
        type: string
    client:
      description: 異なるクライアントで認証を行うために使用する
      schema:
        type: string
  schemas:
    Error:
      description: エラー
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            type: string
          description: エラーメッセージ
          example: エラーが発生しました
    User:
      description: ユーザー
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: ユーザーID
          example: 1
        name:
          type: string
          description: ユーザー名
          example: 太郎
    PaymentGroup:
      description: 支払グループ
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: 支払グループID
          example: 1
        name:
          type: string
          description: 支払グループ名
          example: 家族
    Affiliation:
      description: 所属
      type: object
      required:
        - id
        - name
        - payment_ratio
      properties:
        id:
          type: integer
          format: int64
          description: 所属ID
          example: 1
        name:
          type: string
          description: ユーザー名
          example: 太郎
        payment_ratio:
          type: number
          format: float
          description: 支払割合
          example: 0.4
    DebtRecord:
      description: 借金履歴
      type: object
      required:
        - id
        - lending_user_name
        - borrowing_user_name
        - amount_of_money
        - description
        - transacted_on
      properties:
        id:
          type: integer
          format: int64
          description: 借金履歴ID
          example: 1
        lending_user_name:
          type: string
          description: 貸主名
          example: 太郎
        borrowing_user_name:
          type: string
          description: 借主名
          example: 次郎
        amount_of_money:
          type: integer
          format: int32
          description: 金額
          example: 3000
        description:
          type: string
          description: 説明
          example: 食材
        transacted_on:
          type: string
          format: date
          description: 取引日
          example: "2022-01-01"
    RemittanceRecord:
      description: 送金着金履歴
      type: object
      required:
        - id
        - from_user_name
        - to_user_name
        - amount_of_money
        - transferred_on
      properties:
        id:
          type: integer
          format: int64
          description: 送金履歴ID
          example: 1
        from_user_name:
          type: string
          description: 送金ユーザー名
          example: 太郎
        to_user_name:
          type: string
          description: 着金ユーザー名
          example: 次郎
        amount_of_money:
          type: integer
          format: int32
          description: 送金金額
          example: 3000
        transferred_on:
          type: string
          format: date
          description: 送金日
          example: "2022-01-01"
    FromRemittanceRecord:
      description: 送金履歴
      type: object
      required:
        - id
        - from_user_name
        - amount_of_money
        - transferred_on
      properties:
        id:
          type: integer
          format: int64
          description: 送金履歴ID
          example: 1
        from_user_name:
          type: string
          description: 送金ユーザー名
          example: 太郎
        amount_of_money:
          type: integer
          format: int32
          description: 送金金額
          example: 3000
        transferred_on:
          type: string
          format: date
          description: 送金日
          example: "2022-01-01"
    ToRemittanceRecord:
      description: 着金履歴
      type: object
      required:
        - id
        - to_user_name
        - amount_of_money
        - transferred_on
      properties:
        id:
          type: integer
          format: int64
          description: 送金履歴ID
          example: 1
        to_user_name:
          type: string
          description: 着金ユーザー名
          example: 次郎
        amount_of_money:
          type: integer
          format: int32
          description: 送金金額
          example: 3000
        transferred_on:
          type: string
          format: date
          description: 送金日
          example: "2022-01-01"
  requestBodies:
    UserBody:
      description: リクエストユーザー
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: ユーザー名
                example: 太郎
    PaymentGroupBody:
      description: リクエスト支払グループ
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: 支払グループ名
                example: 家族
    AffiliationsBody:
      description: リクエスト複数所属
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - user_id
                - payment_ratio
              properties:
                user_id:
                  type: integer
                  format: int64
                  description: ユーザーID
                  example: 1
                payment_ratio:
                  type: number
                  format: float
                  description: 支払割合
                  example: 0.4
    DebtRecordsBody:
      description: リクエスト複数借金履歴
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - lending_user_id
                - borrowing_user_id
                - amount_of_money
                - description
                - transacted_on
              properties:
                lending_user_id:
                    type: integer
                    format: int64
                    description: 貸主ID
                    example: 1
                borrowing_user_id:
                    type: integer
                    format: int64
                    description: 借主ID
                    example: 2
                amount_of_money:
                  type: integer
                  format: int32
                  description: 金額
                  example: 3000
                description:
                  type: string
                  description: 説明
                  example: 食材
                transacted_on:
                  type: string
                  format: date
                  description: 取引日
                  example: "2022-01-01"
    RemittanceRecordBody:
      description: リクエスト送金履歴
      content:
        application/json:
          schema:
            type: object
            required:
              - from_user_payment_group_id
              - to_user_payment_group_id
              - amount_of_money
              - transferred_on
            properties:
              from_user_payment_group_id:
                type: integer
                format: int64
                description: 送金ユーザーID
                example: 1
              to_user_payment_group_id:
                type: integer
                format: int64
                description: 着金ユーザーID
                example: 2
              amount_of_money:
                type: integer
                format: int32
                description: 送金金額
                example: 3000
              transferred_on:
                type: string
                format: date
                description: 送金日
                example: "2022-01-01"
    SignUpBody:
      description: サインアップ
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
              - password_confirmation
            properties:
              name:
                type: string
                description: ユーザー名
                example: 太郎
              email:
                type: string
                format: email
                description: メールアドレス
                example: email@example.com
              password:
                type: string
                format: password
                description: パスワード
                example: password
              password_confirmation:
                type: string
                format: password
                description: 確認用パスワード
                example: password
    SignInBody:
      description: サインイン
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                description: メールアドレス
                example: email@example.com
              password:
                type: string
                format: password
                description: パスワード
                example: password
  parameters:
    UserId:
      name: user_id
      in: path
      description: ユーザーID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    FromUserId:
      name: from_user_id
      in: path
      description: 送金ユーザーID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    ToUserId:
      name: to_user_id
      in: path
      description: 着金ユーザーID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    PaymentGroupId:
      name: payment_group_id
      in: path
      description: 支払グループID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    AffiliationId:
      name: affiliation_id
      in: path
      description: 所属ID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    RemittanceRecordId:
      name: remittance_record_id
      in: path
      description: 送金履歴ID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    DebtRecordId:
      name: debt_record_id
      in: path
      description: 借金履歴ID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
  securitySchemes:
    accessToken:
      type: apiKey
      in: header
      name: access-token
    uid:
      type: apiKey
      in: header
      name: uid
    client:
      type: apiKey
      in: header
      name: client
